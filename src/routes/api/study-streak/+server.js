// src/routes/api/study-streak/+server.js

import { json } from '@sveltejs/kit'
import redis from '$lib/server/database'

/**
 * ÈÄ£Á∂öÂ≠¶ÁøíË®òÈå≤„ÇíÂèñÂæó„Åô„ÇãAPI
 */
export async function GET({ url }) {
	const userId = url.searchParams.get('userId')

	if (!userId) {
		return new Response('User ID is required', { status: 400 })
	}

	try {
		const streakKey = `user:study_streak:${userId}`
		const streakData = await redis.hgetall(streakKey)

		console.log('ÂèñÂæó„Åó„ÅüÈÄ£Á∂öÂ≠¶Áøí„Éá„Éº„Çø:', streakData)

		if (streakData && Object.keys(streakData).length > 0) {
			const studyStreak = {
				currentStreak: parseInt(streakData.currentStreak || '0', 10),
				maxStreak: parseInt(streakData.maxStreak || '0', 10),
				lastStudyDate: streakData.lastStudyDate || null,
				totalStudyDays: parseInt(streakData.totalStudyDays || '0', 10),
				firstStudyDate: streakData.firstStudyDate || null,
				todayProblems: parseInt(streakData.todayProblems || '0', 10),
				totalProblems: parseInt(streakData.totalProblems || '0', 10)
			}

			return json(studyStreak)
		} else {
			// ÂàùÂõû„É¶„Éº„Ç∂„Éº„ÅÆ„Éá„Éï„Ç©„É´„ÉàÂÄ§
			const defaultStreak = {
				currentStreak: 0,
				maxStreak: 0,
				lastStudyDate: null,
				totalStudyDays: 0,
				firstStudyDate: null,
				todayProblems: 0,
				totalProblems: 0
			}

			return json(defaultStreak)
		}
	} catch (error) {
		console.error('ÈÄ£Á∂öÂ≠¶ÁøíË®òÈå≤„ÅÆÂèñÂæó„Å´Â§±Êïó:', error)
		return new Response('Internal Server Error', { status: 500 })
	}
}

/**
 * ÈÄ£Á∂öÂ≠¶ÁøíË®òÈå≤„ÇíÊõ¥Êñ∞„Åô„ÇãAPIÔºàÂïèÈ°å„ÇíËß£„ÅÑ„ÅüÊôÇ„Å´Âëº„Å≥Âá∫„Åï„Çå„ÇãÔºâ
 */
export async function POST({ request }) {
	try {
		const { userId, problemsSolved = 1 } = await request.json()

		if (!userId) {
			return new Response('User ID is required', { status: 400 })
		}

		const streakKey = `user:study_streak:${userId}`
		const today = new Date().toISOString().split('T')[0] // YYYY-MM-DDÂΩ¢Âºè

		console.log('=== ÈÄ£Á∂öÂ≠¶ÁøíË®òÈå≤Êõ¥Êñ∞ ===')
		console.log('userId:', userId)
		console.log('‰ªäÊó•„ÅÆÊó•‰ªò:', today)
		console.log('Ëß£„ÅÑ„ÅüÂïèÈ°åÊï∞:', problemsSolved)

		// ÁèæÂú®„ÅÆË®òÈå≤„ÇíÂèñÂæó
		const currentData = await redis.hgetall(streakKey)
		console.log('ÁèæÂú®„ÅÆÈÄ£Á∂öÂ≠¶Áøí„Éá„Éº„Çø:', currentData)

		// üîß currentData„Åånull„ÅÆÂ†¥Âêà„ÅÆÂØæÂøú„ÇíËøΩÂä†
		const safeCurrentData = currentData || {}

		const lastStudyDate = safeCurrentData.lastStudyDate || null
		const currentStreak = parseInt(safeCurrentData.currentStreak || '0', 10)
		const maxStreak = parseInt(safeCurrentData.maxStreak || '0', 10)
		const totalStudyDays = parseInt(safeCurrentData.totalStudyDays || '0', 10)
		const firstStudyDate = safeCurrentData.firstStudyDate || null
		const todayProblems = parseInt(safeCurrentData.todayProblems || '0', 10)
		const totalProblems = parseInt(safeCurrentData.totalProblems || '0', 10)

		// ‰ªäÊó•„ÅÆÂïèÈ°åÊï∞„ÇíÊõ¥Êñ∞
		let newTodayProblems = todayProblems
		let newTotalProblems = totalProblems + problemsSolved

		if (lastStudyDate === today) {
			// ‰ªäÊó•Êó¢„Å´Â≠¶Áøí„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà
			newTodayProblems = todayProblems + problemsSolved
			console.log('‰ªäÊó•„ÅÆÂ≠¶ÁøíÁ∂ôÁ∂ö‰∏≠:', newTodayProblems, 'Âïè')
		} else {
			// Êó•‰ªò„ÅåÂ§â„Çè„Å£„ÅüÂ†¥Âêà
			newTodayProblems = problemsSolved
			console.log('Êñ∞„Åó„ÅÑÊó•„ÅÆÂ≠¶ÁøíÈñãÂßã:', newTodayProblems, 'Âïè')
		}

		// Â≠¶ÁøíË®òÈå≤„ÅÆÊõ¥Êñ∞
		let newCurrentStreak = currentStreak
		let newMaxStreak = maxStreak
		let newTotalStudyDays = totalStudyDays
		let newFirstStudyDate = firstStudyDate
		let isNewStudyDay = false

		// 3Âïè‰ª•‰∏äËß£„ÅÑ„ÅüÂ†¥Âêà„ÅÆÈÄ£Á∂öÂ≠¶ÁøíÂà§ÂÆö
		if (newTodayProblems >= 3 && lastStudyDate !== today) {
			console.log('3Âïè‰ª•‰∏äÈÅîÊàêÔºÅÈÄ£Á∂öÂ≠¶ÁøíÂà§ÂÆöÈñãÂßã')
			isNewStudyDay = true
			newTotalStudyDays += 1

			if (lastStudyDate) {
				const lastDate = new Date(lastStudyDate)
				const todayDate = new Date(today)
				const diffDays = Math.floor((todayDate - lastDate) / (1000 * 60 * 60 * 24))

				console.log('ÂâçÂõûÂ≠¶Áøí„Åã„Çâ„ÅÆÁµåÈÅéÊó•Êï∞:', diffDays)

				if (diffDays === 1) {
					// ÈÄ£Á∂öÂ≠¶ÁøíÁ∂ôÁ∂ö
					newCurrentStreak += 1
					console.log('ÈÄ£Á∂öÂ≠¶ÁøíÁ∂ôÁ∂ö:', newCurrentStreak)
				} else if (diffDays > 1) {
					// ÈÄ£Á∂öÂ≠¶ÁøíÈÄîÂàá„Çå
					newCurrentStreak = 1
					console.log('ÈÄ£Á∂öÂ≠¶ÁøíÈÄîÂàá„Çå„ÄÅ„É™„Çª„ÉÉ„Éà')
				}
			} else {
				// ÂàùÂõûÂ≠¶Áøí
				newCurrentStreak = 1
				newFirstStudyDate = today
				console.log('ÂàùÂõûÂ≠¶Áøí')
			}

			// ÊúÄÂ§ßË®òÈå≤„ÇíÊõ¥Êñ∞
			if (newCurrentStreak > newMaxStreak) {
				newMaxStreak = newCurrentStreak
				console.log('ÊúÄÂ§ßË®òÈå≤Êõ¥Êñ∞:', newMaxStreak)
			}
		}

		// „Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò
		const updateData = {
			currentStreak: newCurrentStreak.toString(),
			maxStreak: newMaxStreak.toString(),
			lastStudyDate:
				lastStudyDate === today
					? lastStudyDate
					: newTodayProblems >= 3
						? today
						: lastStudyDate || '',
			totalStudyDays: newTotalStudyDays.toString(),
			firstStudyDate: newFirstStudyDate || '',
			todayProblems: newTodayProblems.toString(),
			totalProblems: newTotalProblems.toString()
		}

		await redis.hset(streakKey, updateData)
		console.log('Êõ¥Êñ∞„Åï„Çå„Åü„Éá„Éº„Çø:', updateData)

		return json({
			currentStreak: newCurrentStreak,
			maxStreak: newMaxStreak,
			lastStudyDate: updateData.lastStudyDate,
			totalStudyDays: newTotalStudyDays,
			firstStudyDate: newFirstStudyDate,
			todayProblems: newTodayProblems,
			totalProblems: newTotalProblems,
			isNewStudyDay: isNewStudyDay,
			needsMoreProblems: newTodayProblems < 3
		})
	} catch (error) {
		console.error('ÈÄ£Á∂öÂ≠¶ÁøíË®òÈå≤„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó:', error)
		return new Response('Internal Server Error', { status: 500 })
	}
}

/**
 * ÈÄ£Á∂öÂ≠¶ÁøíË®òÈå≤„Çí„É™„Çª„ÉÉ„Éà„Åô„ÇãAPIÔºàÁÆ°ÁêÜÁî®Ôºâ
 */
export async function DELETE({ url }) {
	const userId = url.searchParams.get('userId')

	if (!userId) {
		return new Response('User ID is required', { status: 400 })
	}

	try {
		const streakKey = `user:study_streak:${userId}`
		await redis.del(streakKey)

		console.log('ÈÄ£Á∂öÂ≠¶ÁøíË®òÈå≤„Çí„É™„Çª„ÉÉ„Éà:', userId)
		return json({ success: true })
	} catch (error) {
		console.error('ÈÄ£Á∂öÂ≠¶ÁøíË®òÈå≤„ÅÆ„É™„Çª„ÉÉ„Éà„Å´Â§±Êïó:', error)
		return new Response('Internal Server Error', { status: 500 })
	}
}
